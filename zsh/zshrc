# --------------------------------------------
# General Settings
# --------------------------------------------
# 文字コードをUTF-8に設定
export LANG=ja_JP.UTF-8

# キーバインドをviモードに設定
bindkey -v

# ビープ音を鳴らさないようにする
setopt no_beep

# ディレクトリ名の入力のみで移動する
setopt auto_cd

# コマンドのスペルを訂正する
setopt correct

# =以降も補完する(--prefix=/usrなど)
setopt magic_equal_subst

# Ctrl+sのロック, Ctrl+qのロック解除を無効にする
setopt no_flow_control

# cdの後にlsを実行
chpwd() { ls --color=auto }

# --------------------------------------------
# Aliases
# --------------------------------------------
alias ls="ls --color=auto"
alias ll="ls -l --color=auto"
alias la="ls -lA --color=auto"
alias cl="clear"
alias df="df -h"
alias du="du -h"
alias ip="ip -color"
alias -g @g='| grep'
alias -g @f='| find'
alias -g @l='| less'
alias clab="sudo containerlab"

# --------------------------------------------
# PATH設定
# --------------------------------------------
export XDG_CONFIG_HOME="${HOME}/.config"

# Cargo
if type cargo > /dev/null 2>&1; then
  export PATH="${HOME}/.cargo/bin:${PATH}"
fi

# anyenv
if [[ -d "${HOME}/.anyenv" ]]; then
  export ANYENV_ROOT="${HOME}/.anyenv"
  export PATH="${ANYENV_ROOT}/bin:${PATH}"
  eval "$(anyenv init -)"
fi

# Deno
if [[ -d "${HOME}/.deno" ]]; then
  export PATH="${HOME}/.deno/bin:${PATH}"
fi

# CUDA
if [[ -d "/opt/cuda" ]]; then
  export PATH="/opt/cuda/bin:${PATH}"
fi

# --------------------------------------------
# sheldon（プラグインマネージャ）
# --------------------------------------------
if [[ ! -f ${HOME}/.cargo/bin/sheldon ]]; then
  command cargo install sheldon
fi

eval "$(sheldon source)"

# --------------------------------------------
# History
# --------------------------------------------
# ヒストリを保存するファイル
HISTFILE=~/.zsh_history

# メモリに保存されるヒストリの件数
HISTSIZE=100000

# 保存されるヒストリの件数
SAVEHIST=1000000

# 直前と同じコマンドはヒストリに追加しない
setopt hist_ignore_dups

# 他のzshと履歴を共有する
setopt inc_append_history
setopt share_history

# 余分なスペースを削除してヒストリに保存する
setopt hist_reduce_blanks

# 重複して保存しない
setopt hist_ignore_all_dups

# --------------------------------------------
# Ls Color
# --------------------------------------------
# 補完時の色の設定
export LS_COLORS='di=01;34:ln=01;35:so=01;32:ex=01;31:bd=46;34:cd=43;34:su=41;30:sg=46;30:tw=42;30:ow=43;30'

# 補完候補に色を付ける
zstyle ':completion:*:default' list-colors ${(s.:.)LS_COLORS}

# --------------------------------------------
# Complement
# --------------------------------------------
# 補完機能を有効にする
autoload -U compinit; compinit

# 補完候補を一覧で表示する(d)
setopt auto_list

# 補完キー連打で補完候補を順に表示する(d)
setopt auto_menu

# 補完候補をできるだけ詰めて表示する
setopt list_packed

# 補完候補にファイルの種類も表示する
setopt list_types

# Shift-Tabで補完候補を逆順する("\e[Z")
bindkey "^[[Z" reverse-menu-complete

# 補完時に大文字小文字を区別しない
zstyle ':completion:*' matcher-list 'm:{a-z}={A-Z}'

# 補完リストのカーソル部分をハイライトする
zstyle ':completion:*:default' menu select=2

# 補完関数の表示を強化する
zstyle ':completion:*' verbose yes
zstyle ':completion:*' completer _expand _complete _match _prefix _approximate _list _history
zstyle ':completion:*:messages' format '%F{YELLOW}%d'$DEFAULT
zstyle ':completion:*:warnings' format '%F{RED}No matches for:''%F{YELLOW} %d'$DEFAULT
zstyle ':completion:*:descriptions' format '%F{YELLOW}completing %B%d%b'$DEFAULT
zstyle ':completion:*:options' description 'yes'
zstyle ':completion:*:descriptions' format '%F{yellow}Completing %B%d%b%f'$DEFAULT

# マッチ種別を別々に表示
zstyle ':completion:*' group-name ''

# 今いるディレクトリを補完候補から外す
zstyle ':completion:*' ignore-parents parent pwd ..

# フルパスの時でも今のディレクトリを外す場合の設定
zstyle ':completion:*' ignore-parents parent pwd

# cd -<Tab> で今までに行ったディレクトリを表示かつ移動
setopt auto_pushd

# podmanの補完設定
if type podman > /dev/null 2>&1; then
  podman completion -f "${fpath[1]}/_podman" zsh
fi

# kubectlの補完設定
if type kubectl > /dev/null 2>&1; then
  source <(kubectl completion zsh)
fi

# containerlabの補完設定
if type containerlab > /dev/null 2>&1; then
  source <(containerlab completion zsh)
fi

# uvの補完設定
if type uv > /dev/null 2>&1; then
  eval "$(uv generate-shell-completion zsh)"
  eval "$(uvx --generate-shell-completion zsh)"
fi

# --------------------------------------------
# Glob
# --------------------------------------------
# グロブ機能を拡張する
setopt extended_glob

# ファイルグロブで大文字小文字を区別しない
unsetopt caseglob

# --------------------------------------------
# Starship（プロンプト）
# --------------------------------------------
if ! type starship > /dev/null 2>&1; then
  echo "Please install Starship."
fi
export STARSHIP_CONFIG="${HOME}/dotfiles/zsh/starship.toml"
eval "$(starship init zsh)"
